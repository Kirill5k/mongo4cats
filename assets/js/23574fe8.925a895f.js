"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5557],{6659:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var i=o(5893),c=o(1151);const s={id:"circe",title:"Circe",tags:["Circe","JSON"]},t=void 0,r={id:"circe",title:"Circe",description:"Given that MongoDB stores data records as BSON documents, which bear a lot of similarities to a traditional JSON objects, Circe (and other JSON libraries) can be used for deriving codecs for converting Scala case class into documents.",source:"@site/docs/circe.md",sourceDirName:".",slug:"/circe",permalink:"/mongo4cats/docs/circe",draft:!1,unlisted:!1,tags:[{label:"Circe",permalink:"/mongo4cats/docs/tags/circe"},{label:"JSON",permalink:"/mongo4cats/docs/tags/json"}],version:"current",frontMatter:{id:"circe",title:"Circe",tags:["Circe","JSON"]},sidebar:"docsSidebar",previous:{title:"Embedded MongoDB",permalink:"/mongo4cats/docs/embedded"},next:{title:"ZIO",permalink:"/mongo4cats/docs/zio"}},a={},d=[{value:"JSON to BSON conversions",id:"json-to-bson-conversions",level:3},{value:"Deriving codecs for collections",id:"deriving-codecs-for-collections",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Given that MongoDB stores data records as BSON documents, which bear a lot of similarities to a traditional JSON objects, ",(0,i.jsx)(n.a,{href:"https://circe.github.io/circe/",children:"Circe"})," (and other JSON libraries) can be used for deriving codecs for converting Scala case class into documents."]}),"\n",(0,i.jsxs)(n.p,{children:["To enable Circe support, a dependency has to be added in the ",(0,i.jsx)(n.code,{children:"build.sbt"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.kirill5k" %% "mongo4cats-circe" % "<version>"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Once the dependency is in, automatic derivation of MongoDB codecs can be enabled by including the following import:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import mongo4cats.circe._\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"mongo4cats.circe"})," includes several functions for deriving bson value encoders and decoders from provided Circe codecs, as well codecs for converting some special data types (ObjectId and dates) to MongoDB's specific bson representations."]}),"\n",(0,i.jsx)(n.h3,{id:"json-to-bson-conversions",children:"JSON to BSON conversions"}),"\n",(0,i.jsxs)(n.p,{children:["Assuming there are instances of ",(0,i.jsx)(n.code,{children:"Encoder[T]"})," and ",(0,i.jsx)(n.code,{children:"Decoder[T]"})," available in the implicit scope, a class ",(0,i.jsx)(n.code,{children:"T"})," can be converted to a bson value and back:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import io.circe.generic.auto._\nimport mongo4cats.bson.{Document, ObjectId}\nimport mongo4cats.circe._\nimport mongo4cats.bson.syntax._\n\nimport java.time.Instant\n\nfinal case class MyClass(\n  _id: ObjectId,\n  dateField: Instant,\n  stringField: String,\n  intField: Int,\n  longField: Long,\n  arrayField: List[String],\n  optionField: Option[String]\n)\n\nval myClass = MyClass(\n  _id = ObjectId.gen,\n  dateField = Instant.now(),\n  stringField = "string",\n  intField = 1,\n  longField = 1660999000L,\n  arrayField = List("item1", "item2"),\n  optionField = None\n)\n\nval doc = Document("_id" := ObjectId.gen, "myClasses" := List(myClass))\nval jsonString = doc.toJson\n//{\n//  "_id": {\n//    "$oid": "6300e54d64332103430291d3"\n//  },\n//  "myClasses": [\n//  {\n//    "_id": {\n//      "$oid": "6300e54d64332103430291d2"\n//    },\n//    "dateField": {\n//      "$date": "2022-08-20T13:44:45.736Z"\n//    },\n//    "stringField": "string",\n//    "intField": 1,\n//    "longField": 1660999000,\n//    "arrayField": [\n//    "item1",\n//    "item2"\n//    ],\n//    "optionField": null\n//  }\n//  ]\n//}\nval retrievedMyClasses = doc.getAs[List[MyClass]]("myClasses")\n//Some(List(MyClass(6300e54d64332103430291d2,2022-08-20T13:44:45.736633Z,string,1,1660999000,List(item1, item2),None)))\n'})}),"\n",(0,i.jsx)(n.h3,{id:"deriving-codecs-for-collections",children:"Deriving codecs for collections"}),"\n",(0,i.jsxs)(n.p,{children:["In order to be able to derive codecs for case classes and use them with collections, we need to build an instance of ",(0,i.jsx)(n.code,{children:"MongoCodecProvider[T]"}),".\nThis can be done automatically on the fly or manually by creating codec provider with ",(0,i.jsx)(n.code,{children:"deriveCirceCodecProvider"})," function, assuming there are instances of ",(0,i.jsx)(n.code,{children:"Encoder[T]"})," and ",(0,i.jsx)(n.code,{children:"Decoder[T]"})," available in the implicit scope:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:"import io.circe.generic.auto._\nimport mongo4cats.codecs.MongoCodecProvider\nimport mongo4cats.circe._\n\nobject MyClass {\n  implicit val myClassCodecProvider: MongoCodecProvider[MyClass] = deriveCirceCodecProvider\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["To use it with ",(0,i.jsx)(n.code,{children:"MongoCollection"}),", codec provider needs to be added to the codec registry:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-scala",children:'import cats.effect.IO\nimport mongo4cats.collection.MongoCollection\n\nval collection: IO[MongoCollection[IO, MyClass]] = database.getCollectionWithCodec[MyClass]("mycoll")\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>r,a:()=>t});var i=o(7294);const c={},s=i.createContext(c);function t(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);