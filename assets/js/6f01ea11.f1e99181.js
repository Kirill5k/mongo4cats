"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[739],{7119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>f,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var o=t(5893),i=t(1151);const s={id:"find",title:"Find",tags:["Filter","find","sort","skip","limit"]},a=void 0,r={id:"operations/find",title:"Find",description:"Find operation can be used for retrieving a subset of the existing data from a MongoDB collection",source:"@site/docs/operations/find.md",sourceDirName:"operations",slug:"/operations/find",permalink:"/mongo4cats/docs/operations/find",draft:!1,unlisted:!1,tags:[{label:"Filter",permalink:"/mongo4cats/docs/tags/filter"},{label:"find",permalink:"/mongo4cats/docs/tags/find"},{label:"sort",permalink:"/mongo4cats/docs/tags/sort"},{label:"skip",permalink:"/mongo4cats/docs/tags/skip"},{label:"limit",permalink:"/mongo4cats/docs/tags/limit"}],version:"current",frontMatter:{id:"find",title:"Find",tags:["Filter","find","sort","skip","limit"]},sidebar:"docsSidebar",previous:{title:"Index",permalink:"/mongo4cats/docs/operations/indexes"},next:{title:"Update",permalink:"/mongo4cats/docs/operations/update"}},l={},c=[];function d(e){const n={a:"a",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Find operation can be used for retrieving a subset of the existing data from a MongoDB collection\nwith the option for specifying what data to return, the number of documents to return and in what order."}),"\n",(0,o.jsx)(n.p,{children:"The result of an operation can be returned in the following forms:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The first document that matches a query - ",(0,o.jsx)(n.code,{children:"F[Option[T]]"})]}),"\n",(0,o.jsxs)(n.li,{children:["All documents bundled in a single collection - ",(0,o.jsx)(n.code,{children:"F[Iterable[T]]"})]}),"\n",(0,o.jsxs)(n.li,{children:["A Stream of documents where each item is emitted as soon as it is obtained - ",(0,o.jsx)(n.code,{children:"fs2.Stream[F, T]"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Find operation can be executed by calling ",(0,o.jsx)(n.code,{children:"find"})," method on a ",(0,o.jsx)(n.code,{children:"MongoCollection[F, T]"})," instance:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"import mongo4cats.bson.Document\n\nval data: fs2.Stream[IO, Document] = collection.find.stream\n"})}),"\n",(0,o.jsx)(n.p,{children:"To specify what data to return, additional filters can be passed in:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.operations.Filter\n\nval filter1 = Filter.eq("field1", "foo")\nval filter2 = Filter.eq("field2", "bar")\nval filter3 = Filter.exists("field3")\nval data: IO[Option[Document]] = collection.find((filter1 || filter2) && filter2).first\n'})}),"\n",(0,o.jsxs)(n.p,{children:["As can be noted from the example above, filters are composable and can be chained together using logical operators ",(0,o.jsx)(n.code,{children:"||"})," and ",(0,o.jsx)(n.code,{children:"&&"}),".\nThe full list of available filters can be found either by exploring API of the ",(0,o.jsx)(n.code,{children:"mongo4cats.collection.operations.Filter"})," companion object or by vising the official MongoDB ",(0,o.jsx)(n.a,{href:"https://docs.mongodb.com/drivers/java/sync/current/fundamentals/builders/filters/",children:"documentation"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["To reduce the number of returned document, ",(0,o.jsx)(n.code,{children:"skip"})," and ",(0,o.jsx)(n.code,{children:"limit"})," methods can be applied:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:"val data = IO[Iterable[Document]] = collection.find\n  .skip(10) // skip the first 10 \n  .limit(100) // take the next 100\n  .all\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ordering of the data can be enforced by calling either ",(0,o.jsx)(n.code,{children:"sortBy"})," or ",(0,o.jsx)(n.code,{children:"sort"})," method:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.operations.Sort\n\n// sort in ascending order by field1, then in descending order by field2\nval data = IO[Iterable[Document]] = collection.find.sort(Sort.asc("field1").desc("field2")).all\n\n// same as the above but without Sort specification\nval data = IO[Iterable[Document]] = collection.find.sortBy("field1").sortByDesc("field2").all\n'})})]})}function f(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var o=t(7294);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);