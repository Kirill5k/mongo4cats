"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1669],{5688:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var t=o(5893),s=o(1151);const i={id:"zio",title:"ZIO",tags:["ZIO"]},a=void 0,c={id:"zio",title:"ZIO",description:"The mongo4cats-zio module defines type aliases and constructors which replace Cats Effect and FS2 with ZIO and",source:"@site/docs/zio.md",sourceDirName:".",slug:"/zio",permalink:"/mongo4cats/docs/zio",draft:!1,unlisted:!1,tags:[{label:"ZIO",permalink:"/mongo4cats/docs/tags/zio"}],version:"current",frontMatter:{id:"zio",title:"ZIO",tags:["ZIO"]},sidebar:"docsSidebar",previous:{title:"Circe",permalink:"/mongo4cats/docs/circe"}},d={},l=[{value:"Connecting to a database and accessing collections",id:"connecting-to-a-database-and-accessing-collections",level:3},{value:"Embedded MongoDB",id:"embedded-mongodb",level:3}];function r(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"mongo4cats-zio"})," module defines type aliases and constructors which replace Cats Effect and FS2 with ZIO and\nZIO-Streams, respectively.\nSimilarly, ",(0,t.jsx)(n.code,{children:"mongo4cats-zio-embedded"})," brings in embedded MongoDB runner implemented with ZIO effects. This provides more\nergonomic way of integrating MongoDB with ",(0,t.jsx)(n.a,{href:"https://zio.dev",children:"ZIO 2"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["To get access to ",(0,t.jsx)(n.code,{children:"ZMongoClient"}),", ",(0,t.jsx)(n.code,{children:"ZMongoDatabase"})," and ",(0,t.jsx)(n.code,{children:"ZMongoCollection"})," type aliases, the following dependency needs to\nbe added:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.kirill5k" %% "mongo4cats-zio" % "<version>"\n'})}),"\n",(0,t.jsx)(n.p,{children:"ZIO-compatible Embedded MongoDB can be brought in with:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.kirill5k" %% "mongo4cats-zio-embedded" % "<version>"\n'})}),"\n",(0,t.jsx)(n.p,{children:"Next, all the essential classes will be available from:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import mongo4cats.zio._\n"})}),"\n",(0,t.jsx)(n.h3,{id:"connecting-to-a-database-and-accessing-collections",children:"Connecting to a database and accessing collections"}),"\n",(0,t.jsxs)(n.p,{children:["To establish a connection with a database, we need to create a ",(0,t.jsx)(n.code,{children:"ZMongoClient"})," first.\nOnce the client is built, this will give us access to its databases. Furthermore, with ",(0,t.jsx)(n.code,{children:"ZMongoDatabase"})," we'll be able to\nbrowse document collections in the database."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.zio._\n\nval client = ZLayer.scoped[Any](ZMongoClient.fromConnectionString("mongodb://localhost:27017"))\nval database = ZLayer.fromZIO(ZIO.serviceWithZIO[ZMongoClient](_.getDatabase("my-db")))\nval collection = ZLayer.fromZIO(ZIO.serviceWithZIO[ZMongoDatabase](_.getCollection("docs")))\n'})}),"\n",(0,t.jsx)(n.h3,{id:"embedded-mongodb",children:"Embedded MongoDB"}),"\n",(0,t.jsx)(n.p,{children:"ZIO-based embedded MongoDB is available from:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import mongo4cats.zio.embedded._\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To use it in tests (or anywhere else), just extend ",(0,t.jsx)(n.code,{children:"EmbeddedMongo"})," trait:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.bson._\nimport mongo4cats.bson.syntax._\nimport mongo4cats.zio._\nimport mongo4cats.zio.embedded.EmbeddedMongo\nimport zio._\nimport zio.test._\nimport zio.test.Assertion._\n\nobject ZMongoCollectionSpec extends ZIOSpecDefault with EmbeddedMongo {\n  override def spec = suite("A ZMongoCollection")(\n    test("should store and retrieve documents") {\n      withRunningEmbeddedMongo("localhost", 27017) {\n        ZIO\n          .serviceWithZIO[ZMongoDatabase] { db =>\n            for {\n              coll <- db.getCollection("coll")\n              doc = Document("_id" := ObjectId.gen)\n              insertResult <- coll.insertOne(doc)\n              result <- coll.find.all\n            } yield assert(result)(equalTo(List(doc)))\n          }\n          .provide(\n            ZLayer.scoped(ZMongoClient.fromConnectionString(s"mongodb://localhost:27017")),\n            ZLayer.fromZIO(ZIO.serviceWithZIO[ZMongoClient](_.getDatabase("my-db")))\n          )\n      }\n    }\n  )\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>a});var t=o(7294);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);