"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5204],{1024:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>r});var t=n(5893),c=n(1151);const i={id:"collection",title:"Getting a collection",tags:["MongoCollection"]},a=void 0,s={id:"gettingstarted/collection",title:"Getting a collection",description:"An instance of MongoCollection[F, T] can be obtained from an existing database instance by specifying collection's name:",source:"@site/docs/gettingstarted/collection.md",sourceDirName:"gettingstarted",slug:"/gettingstarted/collection",permalink:"/mongo4cats/docs/gettingstarted/collection",draft:!1,unlisted:!1,tags:[{label:"MongoCollection",permalink:"/mongo4cats/docs/tags/mongo-collection"}],version:"current",frontMatter:{id:"collection",title:"Getting a collection",tags:["MongoCollection"]},sidebar:"docsSidebar",previous:{title:"Making a connection",permalink:"/mongo4cats/docs/gettingstarted/connection"},next:{title:"Working with documents",permalink:"/mongo4cats/docs/gettingstarted/documents"}},l={},r=[];function d(e){const o={a:"a",code:"code",p:"p",pre:"pre",...(0,c.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(o.p,{children:["An instance of ",(0,t.jsx)(o.code,{children:"MongoCollection[F, T]"})," can be obtained from an existing database instance by specifying collection's name:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'import mongo4cats.bson.Document\nimport mongo4cats.collection.MongoCollection\n\nval collection: IO[MongoCollection[IO, Document]] = database.getCollection("mycoll")\n'})}),"\n",(0,t.jsxs)(o.p,{children:["Alternatively, if collection needs to be tied to a specific class, ",(0,t.jsx)(o.code,{children:"MongoDatabase[F]"})," has special methods for doing this as well:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'// needs to have an instance of CodecRegistry built for the provided class\nval collection: IO[MongoCollection[IO, MyClass]] = database.getCollection[MyClass]("mycoll", myClassCodecRegistry)\n\n// needs to have an instance of MongoCodecProvider[MyClass] available in the implicit scope\nval collection: IO[MongoCollection[IO, MyClass]] = database.getCollectionWithCodec[MyClass]("mycoll")\n'})}),"\n",(0,t.jsxs)(o.p,{children:["More information on MongoDB codecs and codec registries can be found in the ",(0,t.jsx)(o.a,{href:"https://docs.mongodb.com/drivers/java/sync/current/fundamentals/data-formats/codecs/",children:"official documentation"}),".\nOne of the supported options for deriving MongoDB codecs is through the use of the popular Json library for Scala - ",(0,t.jsx)(o.a,{href:"../circe",children:"Circe"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["If a collection that you are trying to obtain does not exist, it will be created by MongoDB on a first query. Additionally, ",(0,t.jsx)(o.code,{children:"MongoDatabase[F]"})," has methods for creating collections explicitly:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-scala",children:'val collection: IO[Unit] = database.createCollection("mycoll")\n\n// or with options\nimport mongo4cats.models.database.CreateCollectionOptions\n\nval options = CreateCollectionOptions().capped(true).sizeInBytes(1024L)\nval collection: IO[Unit] = database.createCollection("mycoll", options)\n'})})]})}function g(e={}){const{wrapper:o}={...(0,c.a)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,o,n)=>{n.d(o,{Z:()=>s,a:()=>a});var t=n(7294);const c={},i=t.createContext(c);function a(e){const o=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:a(e.components),t.createElement(i.Provider,{value:o},e.children)}}}]);