"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9448],{1757:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>r});var t=o(5893),d=o(1151);const s={id:"embedded",title:"Embedded MongoDB",tags:["Embedded MongoDB","Testing"]},c=void 0,i={id:"embedded",title:"Embedded MongoDB",description:"The main goal of mongo4cats-embedded module is to provide a way of making quick and easy connections to a database instance that will be disposed afterwards.",source:"@site/docs/embedded.md",sourceDirName:".",slug:"/embedded",permalink:"/mongo4cats/docs/embedded",draft:!1,unlisted:!1,tags:[{label:"Embedded MongoDB",permalink:"/mongo4cats/docs/tags/embedded-mongo-db"},{label:"Testing",permalink:"/mongo4cats/docs/tags/testing"}],version:"current",frontMatter:{id:"embedded",title:"Embedded MongoDB",tags:["Embedded MongoDB","Testing"]},sidebar:"docsSidebar",previous:{title:"Watch",permalink:"/mongo4cats/docs/operations/watch"},next:{title:"Circe",permalink:"/mongo4cats/docs/circe"}},a={},r=[];function l(e){const n={code:"code",p:"p",pre:"pre",...(0,d.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The main goal of ",(0,t.jsx)(n.code,{children:"mongo4cats-embedded"})," module is to provide a way of making quick and easy connections to a database instance that will be disposed afterwards.\nOne of the use-cases for such scenarios is unit testing where you would just need to make 1 or 2 connections to a fresh database instance to test your queries and be done with it."]}),"\n",(0,t.jsxs)(n.p,{children:["To enable embedded-mongo support, a dependency has to be added in the ",(0,t.jsx)(n.code,{children:"build.sbt"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'libraryDependencies += "io.github.kirill5k" %% "mongo4cats-embedded" % "<version>"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Once the dependency is added, the embedded-mongodb can be brought in by extending ",(0,t.jsx)(n.code,{children:"EmbeddedMongo"})," trait from ",(0,t.jsx)(n.code,{children:"mongo4cats.embedded"})," package:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:'import cats.effect.IO\nimport cats.effect.unsafe.implicits.global\nimport mongo4cats.bson.Document\nimport mongo4cats.bsom.syntax._\nimport mongo4cats.client.MongoClient\nimport mongo4cats.embedded.EmbeddedMongo\nimport org.scalatest.matchers.must.Matchers\nimport org.scalatest.wordspec.AsyncWordSpec\n\nclass WithEmbeddedMongoSpec extends AsyncWordSpec with Matchers with EmbeddedMongo {\n\n  // by default, MongoDB instance will be accessible on 27017 port, which can be overridden:\n  override val mongoPort: Int = 12345\n\n  "A MongoCollection" should {\n    "create and retrieve documents from a db" in withRunningEmbeddedMongo {\n      MongoClient.fromConnectionString[IO]("mongodb://localhost:12345").use { client =>\n        for {\n          db <- client.getDatabase("testdb")\n          coll <- db.getCollection("docs")\n          testDoc = Document("Hello" := "World!")\n          _ <- coll.insertOne(testDoc)\n          foundDoc <- coll.find.first\n        } yield foundDoc mustBe Some(testDoc)\n      }\n    }.unsafeToFuture()\n\n    // or connection properties can be passed explicitly\n    "start instance on different port" in withRunningEmbeddedMongo("localhost", 12355) {\n      MongoClient.fromConnectionString[IO]("mongodb://localhost:12355").use { client =>\n        for {\n          db <- client.getDatabase("testdb")\n          coll <- db.getCollection("docs")\n          testDoc = Document("Hello" := "World!")\n          _ <- coll.insertOne(testDoc)\n          foundDoc <- coll.find.first\n        } yield foundDoc mustBe Some(testDoc)\n      }\n    }.unsafeToFuture()\n  }\n}\n\n'})})]})}function m(e={}){const{wrapper:n}={...(0,d.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>i,a:()=>c});var t=o(7294);const d={},s=t.createContext(d);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);