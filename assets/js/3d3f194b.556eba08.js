"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3413],{4908:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>r});var i=n(5893),s=n(1151);const o={id:"distinct",title:"Distinct",tags:["distinct"]},a=void 0,c={id:"operations/distinct",title:"Distinct",description:"Distinct operation returns all distinct values for a field across all documents in a collection.",source:"@site/docs/operations/distinct.md",sourceDirName:"operations",slug:"/operations/distinct",permalink:"/mongo4cats/docs/operations/distinct",draft:!1,unlisted:!1,tags:[{label:"distinct",permalink:"/mongo4cats/docs/tags/distinct"}],version:"current",frontMatter:{id:"distinct",title:"Distinct",tags:["distinct"]},sidebar:"docsSidebar",previous:{title:"Update",permalink:"/mongo4cats/docs/operations/update"},next:{title:"Aggregate",permalink:"/mongo4cats/docs/operations/aggregate"}},l={},r=[];function d(t){const e={code:"code",p:"p",pre:"pre",...(0,s.a)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Distinct operation returns all distinct values for a field across all documents in a collection.\nThe operation can be executed by calling ",(0,i.jsx)(e.code,{children:"distinct"})," method on a ",(0,i.jsx)(e.code,{children:"MongoCollection[F, T]"})," class and passing a name of a field:"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:'val distinctValues: IO[Iterable[String]] = collection.distinct[String]("field1").all\n\n// or stream all found values instead\nval distinctValues: fs2.Stream[IO, String] = collection.distinct[String]("field1").stream\n'})}),"\n",(0,i.jsx)(e.p,{children:"If the document's field is represented by a more complicated class in a collection than a String, it can be upcasted to a required type:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-scala",children:'import mongo4cats.bson.Document\n\nval distinctValues: IO[Iterable[Document]] = collection.distinct[Document]("field1").all\n\n// assuming you have an instance of MongoCodecProvider[MyClass] available in the implicit scope\nval distinctValues: IO[Iterable[MyClass]] = collection.distinctWithCodec[MyClass]("field1").all\n\n// or you can add codecs explicitly\nval distinctValues: IO[Iterable[MyClass]] = collection.withAddedCodec(myClassCodecs).distinct[MyClass]("field1").all\n'})})]})}function u(t={}){const{wrapper:e}={...(0,s.a)(),...t.components};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(d,{...t})}):d(t)}},1151:(t,e,n)=>{n.d(e,{Z:()=>c,a:()=>a});var i=n(7294);const s={},o=i.createContext(s);function a(t){const e=i.useContext(o);return i.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:a(t.components),i.createElement(o.Provider,{value:e},t.children)}}}]);