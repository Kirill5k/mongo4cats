"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3756],{8449:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>x,frontMatter:()=>t,metadata:()=>d,toc:()=>r});var o=i(5893),s=i(1151);const t={id:"indexes",title:"Index",tags:["Index","createIndex"]},a=void 0,d={id:"operations/indexes",title:"Index",description:"Indexes support efficient execution of queries in MongoDB as well as allow efficient sorting, some additional capabilities like unique constraints and geospatial search, and more.",source:"@site/docs/operations/indexes.md",sourceDirName:"operations",slug:"/operations/indexes",permalink:"/mongo4cats/docs/operations/indexes",draft:!1,unlisted:!1,tags:[{label:"Index",permalink:"/mongo4cats/docs/tags/index"},{label:"createIndex",permalink:"/mongo4cats/docs/tags/create-index"}],version:"current",frontMatter:{id:"indexes",title:"Index",tags:["Index","createIndex"]},sidebar:"docsSidebar",previous:{title:"Operations",permalink:"/mongo4cats/docs/operations"},next:{title:"Find",permalink:"/mongo4cats/docs/operations/find"}},c={},r=[];function l(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Indexes support efficient execution of queries in MongoDB as well as allow efficient sorting, some additional capabilities like unique constraints and geospatial search, and ",(0,o.jsx)(n.a,{href:"https://docs.mongodb.com/manual/indexes/",children:"more"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MongoCollection[F, T]"})," supports several ways of creating an index on a field (or multiple fields).\nThe simplest one would be calling ",(0,o.jsx)(n.code,{children:"createIndex"})," method and passing defined index specification object:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.operations.Index\n\nval result: IO[String] = collection.createIndex(Index.ascending("field"))\n'})}),"\n",(0,o.jsx)(n.p,{children:"To create a compound index, multiple specifications can be combined together:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.operations.Index\n\nval compoundIndex = Index.ascending("field1").descending("field2")\n\n// or by just combining 2 indexes together\nval index1 = Index.ascending("field1")\nval index2 = Index.descending("field2")\nval compoundIndex = index1.combinedWith(index2)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If some additional configuration required, ",(0,o.jsx)(n.code,{children:"createIndex"})," has an overloaded variant which accepts options object:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import mongo4cats.operations.Index\nimport mongo4cats.models.collection.IndexOptions\n\nval index = Index.ascending("name", "email")\nval options = IndexOptions().unique(true)\nval result: IO[String] = collection.createIndex(index, options)\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Alternatively, indexes can be creating by using ",(0,o.jsx)(n.a,{href:"https://docs.mongodb.com/drivers/java/sync/current/fundamentals/builders/indexes/",children:"builders"})," from the standard MongoDB Java library:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'import com.mongodb.client.model.Indexes\n\nval index = Indexes.compoundIndex(Indexes.ascending("field1"), Indexes.ascending("field2"))\nval result: IO[String] = collection.createIndex(index)\n'})})]})}function x(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>a});var o=i(7294);const s={},t=o.createContext(s);function a(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);