"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2533],{8351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>g});var o=n(5893),a=n(1151);const r={id:"aggregate",title:"Aggregate",tags:["Aggregate","Accumulator"]},c=void 0,s={id:"operations/aggregate",title:"Aggregate",description:"Aggregation operations can be used for processing data from multiple MongoDB collections and returning combined results.",source:"@site/docs/operations/aggregate.md",sourceDirName:"operations",slug:"/operations/aggregate",permalink:"/mongo4cats/docs/operations/aggregate",draft:!1,unlisted:!1,tags:[{label:"Aggregate",permalink:"/mongo4cats/docs/tags/aggregate"},{label:"Accumulator",permalink:"/mongo4cats/docs/tags/accumulator"}],version:"current",frontMatter:{id:"aggregate",title:"Aggregate",tags:["Aggregate","Accumulator"]},sidebar:"docsSidebar",previous:{title:"Distinct",permalink:"/mongo4cats/docs/operations/distinct"},next:{title:"Watch",permalink:"/mongo4cats/docs/operations/watch"}},i={},g=[];function l(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Aggregation operations can be used for processing data from multiple MongoDB collections and returning combined results.\nIn MongoDB aggregations are represented in a form of data processing pipelines where documents go through multiple transformations defined in each step.\nMore detailed explanation of the aggregation process can be found in the ",(0,o.jsx)(t.a,{href:"https://docs.mongodb.com/drivers/java/sync/current/fundamentals/aggregation/",children:"official documentation"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["To create such aggregation pipeline, ",(0,o.jsx)(t.code,{children:"Aggregate"})," constructor can be used:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:'import mongo4cats.operations.{Accumulator, Aggregate, Sort}\n\n// specification for grouping multiple transactions from the same group:\nval accumulator = Accumulator\n  .sum("count", 1) // number of transactions in a given group\n  .sum("totalAmount", "$amount") // total amount\n  .first("categoryId", "$category._id") // id of a category under which all transactions are grouped\n\nval aggregation = Aggregate\n  .group("$category", accumulator) // group all transactions by categoryId and accumulate result into a given specification\n  .lookup("categories", "categoryId", "_id", "category") // find a category for each group of transactions by category id\n  .sort(Sort.desc("totalAmount")) // define the order of the produced results\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Once the aggregation pipeline is defined, the aggregation operation can be executed by calling ",(0,o.jsx)(t.code,{children:"aggregate"})," method on a ",(0,o.jsx)(t.code,{children:"MongoCollection[F]"})," instance.\nSimilarly to ",(0,o.jsx)(t.code,{children:"find"}),", the result of ",(0,o.jsx)(t.code,{children:"aggregate"})," can be returned in a form of a single (first) document, list of all documents or a stream:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"import mongo4cats.bson.Document\n\nval result: IO[Option[Document]] = collection.aggregate[Document](aggregation).first\nval result: IO[Iterable[Document]] = collection.aggregate[Document](aggregation).all\nval result: fs2.Stream[IO, Document] = collection.aggregate[Document](aggregation).stream\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Analogously to ",(0,o.jsx)(t.code,{children:"distinct"}),", the result of an aggregation can be tied to a specific class:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"val result: fs2.Stream[IO, MyClass] = collection.aggregateWithCodec[MyClass](aggregation).stream\n"})}),"\n",(0,o.jsxs)(t.p,{children:["If aggregation pipeline ends with the ",(0,o.jsx)(t.code,{children:"$out"})," stage (write document to a specified collection), ",(0,o.jsx)(t.code,{children:"toCollection"})," method can be used:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-scala",children:"val result: IO[Unit] = collection.aggregate[Document](aggregation).toCollection\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>c});var o=n(7294);const a={},r=o.createContext(a);function c(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);